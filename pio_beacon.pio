.program carrier
; outputs a 38 kHz square wave on the output in when the input (burst) pin is high
on:
    set pins, 1 [9]
off:	
	set pins, 0 [5]
    in null 32
    in pins 1
    mov y, isr
    jmp !y off

.program burst
; generate bursts of 180 ms followed by 500 ms recovery period if the current command is non-zero, no output otherwise
; follows the 180ms burst with series of n-1 bursts 10ms off 10ms on where n is the command number before starting recovery
set pins, 0 ; start with carrier off
.wrap_target
check:
    ; check FIFO until a non-zero command appears
    pull noblock
    mov x, osr  ; x contains command from the system
    jmp !x check

; output burst for 180 ms
    set pins, 1 ; switch carrier on
; delay for 180 ms
    set y, 17
on_delay:
    nop [31]
    jmp y-- on_delay

; generate n-1 short pulses 
    ; command in x is one more than required number of short pulses
	; decrement to get the required number while x still holds the current command
    mov y, x    
	jmp y-- ll
ll:
    ; start recovery period if we don't want any short pulses
    jmp !y recovery

    ; decrement again as we'll go round the loop y+1 times
    jmp y-- bursts
bursts:	
    ; each pulse is 10 ms on 10s off
	set pins, 0 [30]
    set pins, 1 [31]
    jmp y-- bursts

; turn off for the recovery period of 500 ms
recovery:
    set pins, 0 ; switch carrier off
; delay for 500 ms
    set y, 24
off_delay:
    nop [31]
    nop [31]
    jmp y-- off_delay
.wrap    

% c-sdk {
static inline void burst_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = burst_program_get_default_config(offset);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    //    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

static inline void carrier_program_init(PIO pio, uint sm, uint offset, uint out_pin, uint in_pin) {
    pio_sm_config c = carrier_program_get_default_config(offset);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, out_pin, 1);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, out_pin);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin, 1, true);

    // configure the IN pin group to be just the input pin 
    //    sm_config_set_out_pins(&c, in_pin, 1);
    sm_config_set_in_pins(&c, in_pin);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, in_pin);
    
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

%}
